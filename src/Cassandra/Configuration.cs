//
//      Copyright (C) DataStax Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

using System;
using System.Collections.Generic;
using System.Linq;

using Cassandra.ExecutionProfiles;
using Cassandra.Helpers;
using Cassandra.Metrics;
using Cassandra.Metrics.Abstractions;
using Cassandra.Serialization;
using Cassandra.Tasks;

namespace Cassandra
{
    /// <summary>
    ///  The configuration of the cluster. It configures the following: <ul> <li>Cassandra
    ///  binary protocol level configuration (compression).</li> <li>Connection
    ///  pooling configurations.</li> <li>low-level tcp configuration options
    ///  (tcpNoDelay, keepAlive, ...).</li> </ul>
    /// </summary>
    public class Configuration
    {
        internal const string DefaultExecutionProfileName = "default";
        internal const string DefaultSessionName = "s";

        /// <summary>
        ///  Gets the policies set for the cluster.
        /// </summary>
        public Policies Policies { get; }

        /// <summary>
        ///  Gets the low-level tcp configuration options used (tcpNoDelay, keepAlive, ...).
        /// </summary>
        public SocketOptions SocketOptions { get; private set; }

        /// <summary>
        ///  The Cassandra binary protocol level configuration (compression).
        /// </summary>
        ///
        /// <returns>the protocol options.</returns>
        public ProtocolOptions ProtocolOptions { get; private set; }

        /// <summary>
        ///  The connection pooling configuration, defaults to null.
        /// </summary>
        /// <returns>the pooling options.</returns>
        public PoolingOptions PoolingOptions { get; }

        /// <summary>
        ///  The .net client additional options configuration.
        /// </summary>
        public ClientOptions ClientOptions { get; private set; }

        /// <summary>
        ///  The query configuration.
        /// </summary>
        public QueryOptions QueryOptions { get; private set; }

        /// <summary>
        ///  The authentication provider used to connect to the Cassandra cluster.
        /// </summary>
        /// <returns>the authentication provider in use.</returns>
        internal IAuthProvider AuthProvider { get; private set; } // Not exposed yet on purpose

        /// <summary>
        ///  The address translator used to translate Cassandra node address.
        /// </summary>
        /// <returns>the address translator in use.</returns>
        public IAddressTranslator AddressTranslator { get; private set; }

        /// <summary>
        /// Gets a read only key value map of execution profiles that were configured with
        /// <see cref="Builder.WithExecutionProfiles"/>. The keys are execution profile names and the values
        /// are <see cref="IExecutionProfile"/> instances.
        /// </summary>
        public IReadOnlyDictionary<string, IExecutionProfile> ExecutionProfiles { get; }

        /// <summary>
        /// <see cref="Builder.WithUnresolvedContactPoints"/>
        /// </summary>
        public bool KeepContactPointsUnresolved { get; }

        /// <summary>
        /// Gets or sets the list of <see cref="TypeSerializer{T}"/> defined.
        /// </summary>
        internal IEnumerable<ITypeSerializer> TypeSerializers { get; set; }

        internal MetadataSyncOptions MetadataSyncOptions { get; }

        internal string SessionName { get; }

        internal bool MetricsEnabled { get; }

        internal static string DefaultApplicationVersion => string.Empty;

        internal static string FallbackApplicationName =>
            AssemblyHelpers.GetEntryAssembly()?.GetName()?.Name ?? Builder.DefaultApplicationName;

        /// <summary>
        /// The version of the application using the created cluster instance.
        /// </summary>
        public string ApplicationVersion { get; }

        /// <summary>
        /// The name of the application using the created cluster instance.
        /// </summary>
        public string ApplicationName { get; }

        /// <summary>
        /// Specifies whether <see cref="ApplicationName"/> was generated by the driver.
        /// </summary>
        public bool ApplicationNameWasGenerated { get; }

        /// <summary>
        /// A unique identifier for the created cluster instance.
        /// </summary>
        public Guid ClusterId { get; }

        /// <summary>
        /// Whether beta protocol versions will be considered by the driver during
        /// the protocol version negotiation.
        /// </summary>
        public bool AllowBetaProtocolVersions { get; }

        /// <summary>
        /// The key is the execution profile name and the value is the IRequestOptions instance
        /// built from the execution profile with that key.
        /// </summary>
        internal IReadOnlyDictionary<string, IRequestOptions> RequestOptions { get; }

        /// <summary>
        /// Configuration options for monitor reporting
        /// </summary>
        public MonitorReportingOptions MonitorReportingOptions { get; }

        internal IRequestOptions DefaultRequestOptions => RequestOptions[Configuration.DefaultExecutionProfileName];

        internal Configuration() :
            this(Policies.DefaultPolicies,
                 new ProtocolOptions(),
                 null,
                 new SocketOptions(),
                 new ClientOptions(),
                 NoneAuthProvider.Instance,
                 new QueryOptions(),
                 new DefaultAddressTranslator(),
                 new Dictionary<string, IExecutionProfile>(),
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null, // keepContactPointsUnresolved
                 null) // allowBetaProtocolVersions
        {
        }

        /// <summary>
        /// Creates a new instance. This class is also used to shareable a context across all instance that are created below one Cluster instance.
        /// One configuration instance per Cluster instance.
        /// </summary>
        internal Configuration(Policies policies,
                               ProtocolOptions protocolOptions,
                               PoolingOptions poolingOptions,
                               SocketOptions socketOptions,
                               ClientOptions clientOptions,
                               IAuthProvider authProvider,
                               QueryOptions queryOptions,
                               IAddressTranslator addressTranslator,
                               IReadOnlyDictionary<string, IExecutionProfile> executionProfiles,
                               MetadataSyncOptions metadataSyncOptions,
                               IDriverMetricsProvider driverMetricsProvider,
                               DriverMetricsOptions metricsOptions,
                               string sessionName,
                               Guid? clusterId,
                               string appVersion,
                               string appName,
                               MonitorReportingOptions monitorReportingOptions,
                               TypeSerializerDefinitions typeSerializerDefinitions,
                               bool? keepContactPointsUnresolved,
                               bool? allowBetaProtocolVersions,
                               IRequestTracker requestTracker = null)
        {
            AddressTranslator = addressTranslator ?? throw new ArgumentNullException(nameof(addressTranslator));
            QueryOptions = queryOptions ?? throw new ArgumentNullException(nameof(queryOptions));

            ClusterId = clusterId ?? Guid.NewGuid();
            ApplicationVersion = appVersion ?? Configuration.DefaultApplicationVersion;
            ApplicationName = appName ?? Configuration.FallbackApplicationName;
            ApplicationNameWasGenerated = appName == null;

            Policies = policies;
            ProtocolOptions = protocolOptions;
            PoolingOptions = poolingOptions;
            SocketOptions = socketOptions;
            ClientOptions = clientOptions;
            AuthProvider = authProvider;
            MetadataSyncOptions = metadataSyncOptions?.Clone() ?? new MetadataSyncOptions();

            SessionName = sessionName;
            MetricsEnabled = driverMetricsProvider != null;
            TypeSerializers = typeSerializerDefinitions?.Definitions;
            KeepContactPointsUnresolved = keepContactPointsUnresolved ?? false;
            AllowBetaProtocolVersions = allowBetaProtocolVersions ?? false;

            // FIXME
            // ExecutionProfiles = BuildExecutionProfilesDictionary(executionProfiles, RequestOptions);
            ExecutionProfiles = null;

            MonitorReportingOptions = monitorReportingOptions ?? new MonitorReportingOptions();
        }

        internal IEnumerable<string> ParseContactPoints(IEnumerable<object> contactPoints)
        {
            // FIXME: bring back more sophisticated parsing (endpoints, IPs, etc.).
            // For now, only strings are supported.
            return contactPoints.Select(cp =>
            {
                if (cp is string s)
                {
                    return s;
                }

                throw new NotImplementedException();
            });
        }
    }
}