schedules:
  commit-oss:
    # Run short suite on commit
    schedule: adhoc
    notify:
      slack: csharp-driver-dev-bots
    matrix:
      exclude:
      # dont build on windows (windows provisioning takes too long, run only on nightly and weekly schedules)
        - os: 'win/cs' 
      # on linux with netcoreapp2.1 target 2.2, 3.0 and 3.11
        - os: 'ubuntu/bionic64/csharp-driver'
          dotnet: ['netcoreapp2.1']
          cassandra: ['2.1', '4.0']
  nightly-oss-ubuntu:
    # nightly job for primary branches to run almost all configs on ubuntu.
    schedule: adhoc
    notify:
      slack: csharp-driver-dev-bots
    branches:
      # regex matches primary branch format (2.1, 3.x, 3.0.x, 3.1.x, master, etc).
      include: ["/((\\d+(\\.[\\dx]+)+)|master)/"]
    matrix:
      exclude:
        - os: 'win/cs'
      # on linux with netcoreapp2.1 target all oss
  nightly-oss-windows:
    # nightly job for primary branches to run several configs on windows (windows builds are slow so it's less configs than the nightly ubuntu schedule).
    schedule: adhoc
    notify:
      slack: csharp-driver-dev-bots
    branches:
      # regex matches primary branch format (2.1, 3.x, 3.0.x, 3.1.x, master, etc).
      include: ["/((\\d+(\\.[\\dx]+)+)|master)/"]
    matrix:
      exclude:
        - os: 'ubuntu/bionic64/csharp-driver'
      # on windows target 3.11 with netcoreapp2.1
        - os: 'win/cs'
          dotnet: ['netcoreapp2.1']
          cassandra: ['2.1', '2.2', '3.0']
  adhoc:
    # adhoc job for non-primary braches that doesn't have the nightly and weekly schedules so this may be used to run same configs as the weekly schedule.
    schedule: adhoc
    notify:
      slack: csharp-driver-dev-bots
    branches:
      exclude: ["/((\\d+(\\.[\\dx]+)+)|master)/"]
  weekly:
    schedule: adhoc
    notify:
      slack: csharp-driver-dev-bots
    branches:
      include: ["/((\\d+(\\.[\\dx]+)+)|master)/"]
os:
  - ubuntu/bionic64/csharp-driver
  - win/cs
cassandra:
  - '2.1'
  - '2.2'
  - '3.0'
  - '3.11'
  - '4.0'
dotnet:
  - 'netcoreapp2.1'
build:
  - batch:
    script: |
      powershell.exe -File .\buildps.ps1
      
      if errorlevel 1 (
         echo Failure Reason Given is %errorlevel%
         exit /b %errorlevel%
      )
      
  - script: |
      export CASS_VERSION_SNI='4.0'

      # Set the Java paths (for CCM)
      export JAVA_HOME=$CCM_JAVA_HOME
      export PATH=$JAVA_HOME/bin:$PATH
      export SIMULACRON_PATH=$HOME/simulacron.jar

      export CCM_PATH=$HOME/ccm

      echo $CSHARP_VERSION

      # Define Cassandra runtime
      echo "========== Setting Server Version =========="
      export CASSANDRA_VERSION_ORIGINAL=$CASSANDRA_VERSION
      export CASSANDRA_VERSION=$CCM_CASSANDRA_VERSION

      echo "========== Copying ssl files to $HOME/ssl =========="
      cp -r /home/jenkins/ccm/ssl $HOME/ssl
      
      if [ $CASSANDRA_VERSION_ORIGINAL = $CASS_VERSION_SNI ]; then  
          export SNI_ENABLED="true"
          export SINGLE_ENDPOINT_PATH="${HOME}/proxy/run.sh"
          export SNI_CERTIFICATE_PATH="${HOME}/proxy/certs/client_key.pfx"
          export SNI_CA_PATH="${HOME}/proxy/certs/root.crt"
      fi
      
      echo $SNI_ENABLED
      echo $SINGLE_ENDPOINT_PATH
      echo $SNI_CERTIFICATE_PATH
      echo $SNI_CA_PATH
      
      ls "${HOME}/proxy/" 

      # Download and uncompress saxon
      mkdir saxon
      curl -L -o saxon/saxon9he.jar https://repo1.maven.org/maven2/net/sf/saxon/Saxon-HE/9.8.0-12/Saxon-HE-9.8.0-12.jar
 
      echo "========== Starting .NET Core Build =========="
      export DOTNET_CLI_TELEMETRY_OPTOUT=1
      dotnet --version

      # work around nuget issue
      mkdir -p /tmp/NuGetScratch
      chmod -R ugo+rwx /tmp/NuGetScratch

      # Install the required packages
      dotnet restore src

      # Run the tests
      dotnet test src/Cassandra.IntegrationTests/Cassandra.IntegrationTests.csproj -v n -f $DOTNET_VERSION -c Release --filter "(TestCategory!=long)&(TestCategory!=memory)" --logger "xunit;LogFilePath=../../TestResult_xunit.xml" || error=true
      java -jar saxon/saxon9he.jar -o:TestResult.xml TestResult_xunit.xml tools/JUnitXml.xslt
      
      #Fail the build if there was an error
      if [ $error ]
      then 
          exit -1
      fi


  - xunit:
    - "**/TestResult.xml"

